// lib/pseudoAI.ts

interface AIKnowledgeBase {
  timeBased: {
    morning: string[];
    afternoon: string[];
    evening: string[];
    night: string[];
  };
  contextBased: {
    work: string[];
    personal: string[];
    health: string[];
    learning: string[];
  };
}

interface Pattern {
  pattern: RegExp;
  context: string;
}

export class PseudoAIService {
  // –Ø–≤–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  private static knowledgeBase: AIKnowledgeBase = {
    timeBased: {
      morning: [
        '–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',
        '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
        '–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å',
        '–ö–æ—Ñ–µ-–±—Ä–µ–π–∫ –∏ —á—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π'
      ],
      afternoon: [
        '–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤',
        '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏',
        '–í—Å—Ç—Ä–µ—á–∏ –∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∑–∞–¥–∞—á–∞–º',
        '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏'
      ],
      evening: [
        '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è',
        '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
        '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
        '–û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
        '–í—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'
      ],
      night: [
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é',
        '–†–µ–ª–∞–∫—Å–∞—Ü–∏—è –∏ –æ—Ç–¥—ã—Ö',
        '–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏',
        '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–µ–ª',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–¥–µ–∂–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞'
      ]
    },

    contextBased: {
      work: [
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É',
        '–°–æ–∑–≤–∞—Ç—å –º–∏—Ç–∏–Ω–≥ —Å –∫–æ–º–∞–Ω–¥–æ–π',
        '–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
        '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏—á–∏',
        '–ö–æ–¥-—Ä–µ–≤—å—é –∑–∞–¥–∞—á'
      ],
      personal: [
        '–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ –∏ –∫–æ–º–º—É–Ω–∞–ª–∫—É',
        '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É',
        '–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã',
        '–£–±–æ—Ä–∫–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ',
        '–ó–∞–±—Ä–∞—Ç—å –≤–µ—á–∏ –∏–∑ —Ö–∏–º—á–∏—Å—Ç–∫–∏'
      ],
      health: [
        '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±–µ–¥',
        '–ò–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ',
        '–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
        '–ü—Ä–∏–Ω—è—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã'
      ],
      learning: [
        '–ü—Ä–æ–π–¥–∏ —É—Ä–æ–∫ –ø–æ Next.js',
        '–ü–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å tech-—Ç—É—Ç–æ—Ä–∏–∞–ª',
        '–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–¥–∏–Ω–≥–µ',
        '–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'
      ]
    }
  };

  // –Ø–≤–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º smartPatterns
  private static smartPatterns: Pattern[] = [
    { pattern: /–≤—Å—Ç—Ä–µ—á|–º–∏—Ç–∏–Ω–≥|—Å–æ–≤–µ—â–∞–Ω/, context: 'work' },
    { pattern: /–æ—Ç—á–µ—Ç|–¥–æ–∫—É–º–µ–Ω—Ç|–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü/, context: 'work' },
    { pattern: /–ø–æ–∫—É–ø|–∫—É–ø–∏|–∑–∞–∫–∞–∑/, context: 'personal' },
    { pattern: /—É–±–æ—Ä–∫|—á–∏—Å—Ç–∫|–ø–æ–º–æ–π/, context: 'personal' },
    { pattern: /—Å–ø–æ—Ä—Ç|—Ç—Ä–µ–Ω–∏—Ä–æ–≤|–∑–∞—Ä—è–¥–∫/, context: 'health' },
    { pattern: /–∑—É–±|–≤—Ä–∞—á|–±–æ–ª—å–Ω–∏—Ü/, context: 'health' },
    { pattern: /—É—á–µ–±–∞|–∏–∑—É—á|–æ–±—É—á–µ–Ω/, context: 'learning' },
    { pattern: /–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º|—Ä–∞–∑—Ä–∞–±–æ—Ç/, context: 'learning' }
  ];

  // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  static async generateSmartSuggestions(
    existingTasks: string[] = [],
    timeOfDay?: string,
    count: number = 3
  ): Promise<{ text: string; confidence: number; context: string }[]> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    await this.simulateThinking();

    const time = timeOfDay || this.getTimeOfDay();
    const context = this.analyzeContext(existingTasks);
    
    const suggestions: { text: string; confidence: number; context: string }[] = [];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    const timeSuggestions = this.knowledgeBase.timeBased[time as keyof typeof this.knowledgeBase.timeBased] || [];
    timeSuggestions.forEach(suggestion => {
      suggestions.push({
        text: suggestion,
        confidence: 0.8,
        context: 'time'
      });
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (context) {
      const contextSuggestions = this.knowledgeBase.contextBased[context as keyof typeof this.knowledgeBase.contextBased] || [];
      contextSuggestions.forEach(suggestion => {
        suggestions.push({
          text: suggestion,
          confidence: 0.9,
          context
        });
      });
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const uniqueSuggestions = suggestions
      .filter((suggestion, index, self) =>
        index === self.findIndex(s => s.text === suggestion.text)
      )
      .filter(suggestion => 
        !existingTasks.some(task => 
          task.toLowerCase().includes(suggestion.text.toLowerCase().substring(0, 10))
        )
      );

    // –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
    return uniqueSuggestions
      .sort((a, b) => b.confidence - a.confidence)
      .slice(0, count)
      .map(suggestion => ({
        ...suggestion,
        text: this.addPersonalTouch(suggestion.text)
      }));
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
  private static analyzeContext(tasks: string[]): string | null {
    const allText = tasks.join(' ').toLowerCase();
    
    for (const { pattern, context } of this.smartPatterns) {
      if (pattern.test(allText)) {
        return context;
      }
    }

    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  private static getTimeOfDay(): string {
    const hour = new Date().getHours();
    if (hour >= 5 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 17) return 'afternoon';
    if (hour >= 17 && hour < 22) return 'evening';
    return 'night';
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
  private static addPersonalTouch(text: string): string {
    const touches = [
      '–ù–µ –∑–∞–±—É–¥—å: ',
      '–í–∞–∂–Ω–æ: ',
      '–†–µ–∫–æ–º–µ–Ω–¥—É—é: ',
      '–°–æ–≤–µ—Ç: ',
      'üí° ',
      'üöÄ ',
      '‚≠ê '
    ];

    const randomTouch = touches[Math.floor(Math.random() * touches.length)];
    return Math.random() > 0.7 ? randomTouch + text : text;
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è "–¥—É–º–∞–Ω–∏—è" AI
  private static simulateThinking(): Promise<void> {
    const delay = 800 + Math.random() * 1200; // 0.8-2 —Å–µ–∫—É–Ω–¥—ã
    return new Promise(resolve => setTimeout(resolve, delay));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –¥–∞—Ç–∞–º–∏
  static async generateSmartReminders(): Promise<string[]> {
    await this.simulateThinking();
    
    const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    const times = ['10:00', '14:30', '16:00', '18:45', '20:00'];
    
    const templates = [
      `–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ {time}`,
      `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–æ {day}`,
      `–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ {time}`,
      `–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ –¥–æ {day}`,
      `–ó–∞–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ {time}`,
      `–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ {day}`
    ];

    const reminders: string[] = [];
    for (let i = 0; i < 3; i++) {
      let reminder = templates[Math.floor(Math.random() * templates.length)];
      
      if (reminder.includes('{time}')) {
        reminder = reminder.replace('{time}', times[Math.floor(Math.random() * times.length)]);
      }
      
      if (reminder.includes('{day}')) {
        const dayOffset = Math.floor(Math.random() * 7) + 1;
        const date = new Date();
        date.setDate(date.getDate() + dayOffset);
        const dayName = days[date.getDay()];
        reminder = reminder.replace('{day}', dayName);
      }
      
      reminders.push(reminder);
    }

    return reminders;
  }
}